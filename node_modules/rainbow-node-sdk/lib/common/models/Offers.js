"use strict";
class Offer {

    createFromData(data) {
        return new Offer(data.id, data.name, data.description, data.profileId, data.canBeSold, data.businessModel, data.isDefault, data.isExclusive);
    }

    createFromProfileData(data) {
        return new Offer(data.offerId, data.offerName, undefined, data.profileId, false, undefined, data.isDefault, data.isExclusive);
    }

    // Constructor
    constructor(id, name, description, profileId, canBeSold, businessModel, isDefault, isExclusive) {
        this.id = id;
        this.name = name;
        this.description = description;
        this.profileId = profileId;
        this.canBeSold = canBeSold ?
            canBeSold :
            false;
        this.businessModel = businessModel;

        this._isDefault = isDefault;
        this._isExclusive = isExclusive;

        var offerName = this
            .name
            .toLowerCase();

        //check name in order to show the right logo
        if (offerName) {
            if (offerName.indexOf("enterprise") !== -1) {
                offerName = "enterprise";
            } else if (offerName.indexOf("business") !== -1) {
                offerName = "business";
            } else if (offerName.indexOf("conference") !== -1) {
                offerName = "conference";
            }
        }
        this.logo = "logo-offer-" + offerName + ".svg";

        this.isEnterprise = function() {
            return this
                .name
                .toLowerCase()
                .startsWith("enterprise");
        };

        this.isBusiness = function() {
            return this
                .name
                .toLowerCase()
                .startsWith("business");
        };

        this.isEssential = function() {
            return this
                .name
                .toLowerCase()
                .startsWith("essential");
        };

        this.isExclusive = function() {
            return this.businessModel !== "usage" && !this
                .name
                .toLowerCase()
                .startsWith("early adopter") && !this
                .name
                .toLowerCase()
                .startsWith("conference"); // nb_users (like "Beta") or undefined (like "Essential")
        };

        this.isOptional = function() {
            return !this.isExclusive(); // like "Conference" or "Early adopter"
        };

    }

    // Comparator
    offerComparator(offer1, offer2) {
        var offerOrder = ["Essential", "Business", "Enterprise"];

        var orderIndex1 = offerOrder.findIndex(function(order) {
            return offer1
                .name
                .startsWith(order); // "Enterprise demo" and "enterprise" must have the same index
        });
        var orderIndex2 = offerOrder.findIndex(function(order) {
            return offer2
                .name
                .startsWith(order); // "Enterprise demo" and "enterprise" must have the same index
        });
        // unknown offers are grouped at the bottom
        orderIndex1 = orderIndex1 === -1 ?
            offerOrder.length :
            orderIndex1;
        orderIndex2 = orderIndex2 === -1 ?
            offerOrder.length :
            orderIndex2;

        if (orderIndex1 < orderIndex2) {
            return -1;
        }
        if (orderIndex1 > orderIndex2) {
            return 1;
        }
        // offer 1 and 2 have same order index reverse sort them by name (ie.
        // "enterprise demo" before "enterprise")
        if (offer1.name > offer2.name) {
            return orderIndex1 === offerOrder.length ?
                1 :
                -1;
        }
        if (offer1.name < offer2.name) {
            return orderIndex1 === offerOrder.length ?
                -1 :
                1;
        }
        return 0;
    }

    // Filters
    isExclusive(offer) {
        return offer.isExclusive(); // nb_users (like "Beta") or undefined (like "Essential")
    }

    sEssential(offer) {
        return offer.isEssential();
    }

    isNotEssential(offer) {
        return !offer.isEssential();
    }

    isModelByNbUser(offer) {
        return offer.businessModel === "nb_users";
    }
}

module.exports = Offer;