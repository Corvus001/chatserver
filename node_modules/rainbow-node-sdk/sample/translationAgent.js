// agent.js
// =============================================================================
// init

"use strict";

var RainbowSDK = require("../index.js");

// LOGGER
var winston = require("winston");
var fs = require('fs');
var os = require('os');
const path = require('path');
var logger = new winston.Logger({
  transports: [new(winston.transports.Console)()]
});

let options = {
  "rainbow": {
    "host": "vincent.openrainbow.org", // Can be "sandbox" (developer platform), "official" or any other hostname when using dedicated AIO
    //"host": "official"
    "mode": "cli"
  },
  "credentials": {
    /* "login" : "zucher@free.fr",
    "password" : "Alcatel1!*"*/
    "login": "bob@pgu.test.openrainbow.net", // The Rainbow email account to use
    "password": "bob" // The Rainbow associated password to use
  },
  // Application identifier
  "application": {
    "appID": "59719d166260a9f00c211fc9", // The Rainbow Application Identifier - application must have a 'deployed' state
    "appSecret": "Oz8cbbElggWcKgrwhSBaL9C9", // The Rainbow Application Secret - retrieved from developer hub
  },
  // Logs options
  "logs": {
    "enableConsoleLogs": true, // Default: true
    "enableFileLogs": false, // Default: false
    "file": {
      "path": "/var/tmp/rainbowsdk/", // Default path used
      "level": "debug" // Default log level used
    }
  },
  // IM options
  "im": {
    "sendReadReceipt": true // True to send the 'read' receipt automatically
  },
  "translation": {
    "credentials": {
      clientId: "1a5d01b3350d44d7b61812b634feed16",
      clientSecret: "7403425dd663489586767975052f808e"
    }
  }
};

// instantiate the SDK
var rainbowSDK = new RainbowSDK(options);

var MsTranslator = require('mstranslator');
var clientTranslator = new MsTranslator({
  api_key: "1a5d01b3350d44d7b61812b634feed16"
}, true);

// Utils:

var makeid = (n) => {
  var text = "";
  var possible = "abcdefghijklmnopqrstuvwxyz0123456789";

  for (var i = 0; i < n; i++) {
    text += possible.charAt(Math.floor(Math.random() * possible.length));
  }

  return text;
};


// start the SDK
rainbowSDK.start()
  .then( () => {
   
    return rainbowSDK.signinCLI();
  }).then( () => {
    rainbowSDK.admin.createGuestUser("alfred", "de musset", "en", 3600);
  });




// =============================================================================
// =============================================================================
// =============================================================================
// SEND PART

var sendResponse = function (message, idUser, lang, content, subject) {
  var messageSent = rainbowSDK
    .im
    .sendMessageToJid(message.response, idUser, lang, content, subject);
};

// =============================================================================
// =============================================================================
// =============================================================================
// SEND PART FOR BUBBLE

var sendBubbleResponse = function (message, idUser, lang, content, subject) {
  var messageSent = rainbowSDK
    .im
    .sendMessageToBubbleJid(message.response, idUser, lang, content, subject);
};

// =============================================================================
// =============================================================================
// =============================================================================
// RECEIVE PART

rainbowSDK
  .events
  .on("rainbow_onmessagereceived", function (message) {
    logger.log(message);
    if (message.event && ["leave", "close"].indexOf(message.event) >= 0) {
      return;
    }

    clientTranslator.translate({
      text: message.content,
      from: message.lang,
      to: "en"
    }, (err, data) => {
      if (err) {
        console.log("error", err);
        return;
      }

      console.log(data);

      if ( message.oob ) {
        logger.log("OOB received");

        // Try to download file
        rainbowSDK.fileServer.getBufferFromUrlWithOptimization(message.oob.url + "_", message.oob.mime, message.oob.filesize, message.oob.filename)
        .then( (data) => {
          let tempFilenameObject = path.parse( message.oob.filename );
          delete tempFilenameObject.base;
          tempFilenameObject.name += "_" + makeid(40);

          let filename =  os.tmpdir() + path.sep + path.format(tempFilenameObject);
  
          fs.writeFile(filename, data, "binary", (err) => {
            if ( err) {
              console.log("error", err);
            }

          });

          
        })
        .catch(function(error) {
          console.log("error: ", error);
        });
      }

      if (message.type === "groupchat") {
        // Send the answer to the bubble
        sendBubbleResponse({
          response: data
        }, message.fromBubbleJid, "en", {
          "message": `###Test\r\n* ${data}`
        }, "My subject");
      } else {

        sendResponse({
          response: data
        }, message.fromJid, "en", {
          "message": `###Test\r\n* ${data}`
        }, "My subject");
      }

    });

  });
