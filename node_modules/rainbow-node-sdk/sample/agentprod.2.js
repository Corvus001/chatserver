// agent.js
// =============================================================================
// init

"use strict";

var RainbowSDK = require("../index.js");
const Conversation = require("../lib/common/models/Conversation");
const util = require('util')

// LOGGER
var winston = require("winston");
var logger = new winston.Logger({
  transports: [new (winston.transports.Console)()]
});

let options = {
  "rainbow": {
    "host": "sandbox", // Can be "sandbox" (developer platform), "official" or any other hostname when using dedicated AIO
  },
  "credentials": {
    // "login": "zucher@free.fr", // The Rainbow email account to use
    // "password": "Alcatel1!*" // The Rainbow associated password to use
    //"login": "zucher@free.fr", // The Rainbow email account to use
    "login": "vincent.bailleau@al-enterprise.com",
    "password": "Alcatel1!*" // The Rainbow associated password to use
  },
  // Application identifier
  "_application": {
    "appID": "5a1bdf40b83d2e32997f4a52", // The Rainbow Application Identifier - application must have a 'deployed' state
    "appSecret": "YKj132Mim3a0rvvTF04ZKhcO", // The Rainbow Application Secret - retrieved from developer hub
    //"appID": "2ef8f42038ba11e883bdcb9cd7105981",
    //"appSecret": "zSAKDh0RsDR2UKYQkKYvJBSJjd49DnpVEHLEdrYVUBAMleelyhSeEVRcsHD1HVVU"
  },
  // Logs options
  "logs": {
    "enableConsoleLogs": true, // Default: true
    "enableFileLogs": true, // Default: false
    "file": {
      "path": "/var/tmp/rainbowsdk/", // Default path used
      "level": "debug" // Default log level used
    }
  },
  // Proxy configuration
  /*   "proxy": {
        "host": "192.168.254.49",
        "port": 8080,
        "http": "http"
    },*/
  // IM options
  "im": {
    "sendReadReceipt": true // True to send the 'read' receipt automatically
  }
};

// instantiate the SDK
var rainbowSDK = new RainbowSDK(options);

// start the SDK
rainbowSDK.start();

// =============================================================================
// =============================================================================
// =============================================================================
// SEND PART

var sendResponse = function(message, idUser, lang, content, subject) {
  var messageSent = rainbowSDK
    .im
    .sendMessageToJid(message.response, idUser, lang, content, subject);
};

// =============================================================================
// =============================================================================
// =============================================================================
// RECEIVE PART

rainbowSDK
  .events
  .on("rainbow_oncontactpresencechanged", function(contact) {
    
  });

rainbowSDK
  .events
  .on("rainbow_onmessagereceived", function(message) {
    try {
    logger.log(message);
    // rainbowSDK.contacts.contacts.forEach( (contact) => {
    //   let id = rainbowSDK.contacts.getAvatarByContactId( contact.id, contact.lastAvatarUpdateDate);
    //   console.log(id)
    // });
    rainbowSDK.bubbles.getAll().forEach( (bubble) => {
      console.log("--->" + util.inspect(bubble));
    });

    if (message.event && ["leave", "close"].indexOf(message.event) >= 0) {
      return;
    }


    /* 

    let conversationbubble = rainbowSDK
      .conversations
      .getConversations().find( (conv)=> {
        return conv && conv.bubble;
      });

      rainbowSDK.bubbles.closeBubble(conversationbubble.bubble).then(bubbleClosed => {
          let conversation = rainbowSDK.conversations.getConversationByBubbleId(conversationbubble.bubble.id);
          rainbowSDK.conversations.getHistoryPage(conversation,100).then( (conversationUpdated)  => {
        });
      });
      */
/*
    let conversations = rainbowSDK
      .conversations
      .getConversations();
    let conversation = null;
    rainbowSDK
      .conversations
      .getHistoryPage(conversations[0], 20)
      .then((conv) => {
        conversation = conv;

        rainbowSDK
      .conversations.getConversationByBubbleId(conv.bubble.id);
        // return rainbowSDK
        //   .im
        //   .getMessagesFromConversation(conversations[0], 30);
        return Promise.resolve( conv);
      })
      .then(() => {
        return rainbowSDK
          .conversations
          .updateServerConversation(conversation.dbId, true);
      })
      .then(() => {
        return rainbowSDK
          .conversations
          .updateServerConversation(conversation.dbId, false);
      })
      .then(() => {
        return rainbowSDK
          .im
          .sendMessageToConversation(conversation, "nothing", "en", {
            "message": "###\r\n" +
            "Test\r\n" +
            "| Titre 1 | Titre 2 | Titre 3 |\r\n" +
            "| -- | -- | -- | -- |\r\n" +
            "| Colonne | Colonne | Colonne |\r\n" +
            "| Alignée à | Alignée au | Alignée à |\r\n" +
            "| Gauche | Centre | Droite |"

          }, "My subject");
      })
      .then(() => {
        return rainbowSDK
          .conversations
          .sendConversationByEmail(conversation.dbId);
      })
      // .then(() => {
      //   return rainbowSDK
      //     .conversations
      //     .removeAllMessages(conversation);
      // })
      .then(() => {
        return rainbowSDK
          .conversations
          .ackAllMessages(conversation.dbId);
      })
      .then(() => {
        return new Promise((resolve) => {
          setTimeout(() => {
            resolve(rainbowSDK.conversations.closeConversation(conversation));
          }, 5000);
        });
      }).catch( (err) => {
        console.log(err);
      });
      */

    if (message.content === "md") {
      sendResponse({
        response: "nothing"
      }, message.fromJid, "en", {
        "message": "### Test\r\n| Titre 1       |     Titre 2     |   Titre 3      || ------------- " +
            "| -------------   | ---------      || Colonne       |     Colonne     |      Col" +
            "onne   || Alignée à     |      Alignée au |     Alignée à  || Gauche        |   " +
            "   Centre     |      Droite    |"

      }, "My subject");
    }

    if (["online", "away", "dnd", "invisible"].indexOf(message.content) > -1) {
      rainbowSDK
        .presence
        .setPresenceTo(message.content);
      console.log("Settings updated to : " + message.content);
    }
  

    rainbowSDK
      ._core
      ._xmpp
      .sendPing();
    /*
    let bubbleList = rainbowSDK
      .bubbles
      .createBubble(`My bubble ${Date.now().toString()}`, "desc", false)
      .then((bubble) => {

        sendResponse({
          response: `bubbles: ${bubble.name} => Created !`
        }, message.fromJid, message.lang);
      });
      */
    } catch( err ) {
      console.log(err);
    } 

  });
