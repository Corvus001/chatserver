// agent.js
// =============================================================================
// init

"use strict";

var RainbowSDK = require("../index.js");

// LOGGER
var winston = require("winston");
var logger = new winston.Logger({
  transports: [new(winston.transports.Console)()]
});

let options = {
  "rainbow": {
    "host": "livedemo.openrainbow.org", // Can be "sandbox" (developer platform), "official" or any other hostname when using dedicated AIO
    "mode": "xmpp"
  },
  "credentials": {
    "login": "bot1@mza.test.openrainbow.net", // The Rainbow email account to use
    "password": "Moussa.123" // The Rainbow associated password to use
  },
  // Application identifier
  "application": {
    "appID": "5943953c5fc2059a6c2a823f", // The Rainbow Application Identifier - application must have a 'deployed' state
    "appSecret": "thosE0pKZkiJZJzTtIwJi8bu", // The Rainbow Application Secret - retrieved from developer hub
  },
  // Logs options
  "logs": {
    "enableConsoleLogs": true, // Default: true
    "enableFileLogs": false, // Default: false
    "file": {
      "path": "/var/tmp/rainbowsdk/", // Default path used
      "level": "debug" // Default log level used
    }
  },
    // Proxy configuration
   // "proxy": {
    //    "host": "192.168.254.49",
  //      "port": 8080,
  //      "http": "http"
  //  },
  // IM options
  "im": {
    "sendReadReceipt": true // True to send the 'read' receipt automatically
  }
};

// instantiate the SDK
var rainbowSDK = new RainbowSDK(options);

// start the SDK
rainbowSDK.start();

// =============================================================================
// =============================================================================
// =============================================================================
// SEND PART

var sendResponse = function (message, idUser, lang) {
  var messageSent = rainbowSDK
    .im
    .sendMessageToJid(message.response, idUser, lang);
};

// =============================================================================
// =============================================================================
// =============================================================================
// RECEIVE PART

rainbowSDK
  .events
  .on("rainbow_onmessagereceived", function (message) {
    logger.log(message);
    if (message.event && ["leave", "close"].indexOf(message.event) >= 0) {
      return;
    }

    let bubbleList = rainbowSDK
      .bubbles
      .createBubble(`My bubble ${Date.now().toString()}`, "desc", false)
      .then((bubble) => {

        sendResponse({
          response: `bubbles: ${bubble.name} => Created !`
        }, message.fromJid, message.lang);
      });

  });
