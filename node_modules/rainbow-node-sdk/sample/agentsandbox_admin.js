// agent.js
// =============================================================================
// init

"use strict";

var RainbowSDK = require("../index.js");
const Conversation = require("../lib/common/models/Conversation");

// LOGGER
var winston = require("winston");
var logger = new winston.Logger({
  transports: [new (winston.transports.Console)()]
});

let options = {
  "rainbow": {
    "host": "sandbox", // Can be "sandbox" (developer platform), "official" or any other hostname when using dedicated AIO
  },
  "credentials": {
    // "login": "zucher@free.fr", // The Rainbow email account to use
    // "password": "Alcatel1!*" // The Rainbow associated password to use
    "login": "zucher@free.fr", // The Rainbow email account to use
    "password": "Alcatel1!*" // The Rainbow associated password to use
  },
  // Application identifier
  "_application": {
    "appID": "5a1bdf40b83d2e32997f4a52", // The Rainbow Application Identifier - application must have a 'deployed' state
    "appSecret": "YKj132Mim3a0rvvTF04ZKhcO", // The Rainbow Application Secret - retrieved from developer hub
    //"appID": "2ef8f42038ba11e883bdcb9cd7105981",
    //"appSecret": "zSAKDh0RsDR2UKYQkKYvJBSJjd49DnpVEHLEdrYVUBAMleelyhSeEVRcsHD1HVVU"
  },
  // Logs options
  "logs": {
    "enableConsoleLogs": true, // Default: true
    "enableFileLogs": false, // Default: false
    "file": {
      "path": "/var/tmp/rainbowsdk/", // Default path used
      "level": "debug" // Default log level used
    }
  },
  // Proxy configuration
  /*   "proxy": {
        "host": "192.168.254.49",
        "port": 8080,
        "http": "http"
    },*/
  // IM options
  "im": {
    "sendReadReceipt": true // True to send the 'read' receipt automatically
  }
};

// instantiate the SDK
var rainbowSDK = new RainbowSDK(options);

// start the SDK
rainbowSDK.start();

// =============================================================================
// =============================================================================
// =============================================================================
// SEND PART

var sendResponse = function(message, idUser, lang, content, subject) {
  var messageSent = rainbowSDK
    .im
    .sendMessageToJid(message.response, idUser, lang, content, subject);
};

// =============================================================================
// =============================================================================
// =============================================================================
// RECEIVE PART

rainbowSDK
  .events
  .on("rainbow_onmessagereceived", function(message) {
    try {
    logger.log(message);
    if (message.event && ["leave", "close"].indexOf(message.event) >= 0) {
      return;
    }

    let contact = null;
    let bubble = null;
    rainbowSDK.bubbles.createBubble("test" + Math.random(10000), "-", false )
    .then( (_bubble) => {
      bubble = _bubble;
      return rainbowSDK.contacts.getContactByJid(message.fromJid)
    })
      .then( (_contact) => {
        contact = _contact;
        return rainbowSDK.admin.getCompanyById(contact.companyId);
    })

    if (message.content === "md") {
      sendResponse({
        response: "nothing"
      }, message.fromJid, "en", {
        "message": "### Test\r\n| Titre 1       |     Titre 2     |   Titre 3      || ------------- " +
            "| -------------   | ---------      || Colonne       |     Colonne     |      Col" +
            "onne   || Alignée à     |      Alignée au |     Alignée à  || Gauche        |   " +
            "   Centre     |      Droite    |"

      }, "My subject");
    }

    if (["online", "away", "dnd", "invisible"].indexOf(message.content) > -1) {
      rainbowSDK
        .presence
        .setPresenceTo(message.content);
      console.log("Settings updated to : " + message.content);
    }
  

    rainbowSDK
      ._core
      ._xmpp
      .sendPing();
    /*
    let bubbleList = rainbowSDK
      .bubbles
      .createBubble(`My bubble ${Date.now().toString()}`, "desc", false)
      .then((bubble) => {

        sendResponse({
          response: `bubbles: ${bubble.name} => Created !`
        }, message.fromJid, message.lang);
      });
      */
    } catch( err ) {
      console.log(err);
    } 

  });
